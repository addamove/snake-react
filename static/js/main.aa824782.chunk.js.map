{"version":3,"sources":["Cell.tsx","Field.tsx","useGetPressedKey.ts","directionalHooks.ts","useRenderCurcle.ts","Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cell","isSnake","className","Field","fieldWidth","fieldHeight","snake","R","map","index","y","x","some","el","Boolean","useGetPressedKey","useState","activeKeyCode","setActiveKeyCode","downHandler","code","upHandler","useEffect","window","addEventListener","removeEventListener","useGetLastDirection","pressedDirection","usePressedGetDirection","direction","setDirection","useRenderCurcle","fps","on","renderNow","setRenderNow","setTimeout","gameSettins","getOffcetFromDirection","App","setSnake","lastPressedDirection","currentHead","newDirection","secondDirection","pressedOffcet","offcet","getCorrectDirection","newSnake","slice","Game","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa824782.chunk.js","sourcesContent":["import React from 'react';\n\ninterface CellProp extends JSX.IntrinsicAttributes {\n  isSnake: boolean;\n}\n\nconst Cell = ({ isSnake }: CellProp): JSX.Element => {\n  return <div className={`field ${isSnake ? 'snake' : ''}`} />;\n};\n\nexport default Cell;\n","import React from 'react';\nimport * as R from 'ramda';\nimport Cell from './Cell';\nimport { Snake } from './types';\n\ninterface FieldProp {\n  fieldWidth: number;\n  fieldHeight: number;\n  snake: Snake;\n}\n\nconst Field = ({ fieldWidth, fieldHeight, snake }: FieldProp): JSX.Element => {\n  return (\n    <div className=\"wrapper\">\n      {R.range(0, fieldWidth * fieldHeight).map((index) => {\n        const y = (index - (index % fieldWidth)) / fieldWidth;\n        const x = index % fieldHeight;\n        const isSnake = snake.some((el) => Boolean(el.x === x && el.y === y));\n        return <Cell key={index} isSnake={isSnake} />;\n      })}\n    </div>\n  );\n};\n\nexport default Field;\n","import { useEffect, useState } from 'react';\n\nfunction hasWindow(): boolean {\n  return typeof window === 'object';\n}\n\nexport default function useGetPressedKey(): string | null {\n  const [activeKeyCode, setActiveKeyCode] = useState<string | null>(null);\n\n  const downHandler = ({ code }: KeyboardEvent) => {\n    if (code !== activeKeyCode) {\n      setActiveKeyCode(code);\n    }\n  };\n\n  const upHandler = ({ code }: KeyboardEvent) => {\n    if (code === activeKeyCode) {\n      setActiveKeyCode(null);\n    }\n  };\n\n  useEffect(() => {\n    if (!hasWindow()) {\n      return;\n    }\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [downHandler, upHandler]);\n\n  return activeKeyCode;\n}\n","import { useEffect, useState } from 'react';\nimport useGetPressedKey from './useGetPressedKey';\nimport { Direction } from './types';\n\nexport const usePressedGetDirection = (): Direction | null => {\n  const pressedKey = useGetPressedKey();\n  switch (pressedKey) {\n    case 'KeyW':\n      return '-y';\n    case 'KeyS':\n      return '+y';\n    case 'KeyA':\n      return '-x';\n    case 'KeyD':\n      return '+x';\n    default:\n      return null;\n  }\n};\n\nexport const useGetLastDirection = (): Direction | null => {\n  const pressedDirection = usePressedGetDirection();\n  const [direction, setDirection] = useState<Direction | null>(null);\n  useEffect(() => {\n    if (pressedDirection) {\n      setDirection(pressedDirection);\n    }\n  }, [direction, pressedDirection]);\n  return direction;\n};\n","import { useState, useEffect } from 'react';\n\nconst useRenderCurcle = ({ fps, on }: { fps: number; on: boolean }): boolean => {\n  const [renderNow, setRenderNow] = useState<boolean>(true);\n  useEffect(() => {\n    if (renderNow && on) {\n      setRenderNow(false);\n      setTimeout(() => {\n        setRenderNow(true);\n      }, 1000 / fps);\n    }\n  }, [fps, on, renderNow]);\n  return renderNow;\n};\n\nexport default useRenderCurcle;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Field from './Field';\nimport { Snake, Direction, Coodinates } from './types';\nimport { useGetLastDirection } from './directionalHooks';\nimport useRenderCurcle from './useRenderCurcle';\n\nconst gameSettins: {\n  fieldWidth: number;\n  fieldHeight: number;\n  initialSnake: Snake;\n  initialSpeed: number;\n  initialDirection: Direction;\n} = {\n  fieldWidth: 10,\n  fieldHeight: 10,\n  initialSnake: [\n    { x: 3, y: 0 },\n    { x: 2, y: 0 },\n    { x: 1, y: 0 },\n    { x: 0, y: 0 },\n  ],\n  initialSpeed: 4,\n  initialDirection: '+x',\n};\n\nconst getOffcetFromDirection = (direction: Direction | null): Coodinates => {\n  const x = direction === '+x' ? 1 : direction === '-x' ? -1 : 0;\n  const y = direction === '+y' ? 1 : direction === '-y' ? -1 : 0;\n  return { x, y };\n};\n\nconst getCorrectDirection = (\n  direction: Direction,\n  secondDirection: Direction | null,\n): Direction => {\n  const pressedOffcet = getOffcetFromDirection(secondDirection);\n  const offcet = getOffcetFromDirection(direction);\n\n  const directionIsInvalid =\n    (pressedOffcet.x && pressedOffcet.x === -offcet.x) ||\n    (pressedOffcet.y && pressedOffcet.y === -offcet.y);\n\n  if (!directionIsInvalid && secondDirection) {\n    return secondDirection;\n  }\n  return direction;\n};\n\nconst App: React.FC = () => {\n  const [snake, setSnake] = useState<Snake>(gameSettins.initialSnake);\n  const [direction, setDirection] = useState<Direction>(gameSettins.initialDirection);\n  const lastPressedDirection = useGetLastDirection();\n\n  const renderNow = useRenderCurcle({ fps: gameSettins.initialSpeed, on: true });\n\n  useEffect(() => {\n    if (renderNow) {\n      const currentHead = snake[0];\n\n      const newDirection = getCorrectDirection(direction, lastPressedDirection);\n\n      const offcet = getOffcetFromDirection(newDirection);\n\n      setDirection(newDirection);\n\n      const newHead: Coodinates = { x: currentHead.x + offcet.x, y: currentHead.y + offcet.y };\n      const newSnake: Snake = [newHead, ...snake.slice(0, -1)];\n      setSnake(newSnake);\n    }\n  }, [renderNow, snake, setSnake, direction, setDirection, lastPressedDirection]);\n\n  return (\n    <Field\n      fieldWidth={gameSettins.fieldWidth}\n      fieldHeight={gameSettins.fieldHeight}\n      snake={snake}\n    />\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport './App.css';\nimport Game from './Game';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Game />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}