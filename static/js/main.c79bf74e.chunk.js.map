{"version":3,"sources":["Cell.tsx","checkIfFieldInArray.ts","Field.tsx","useGetPressedKey.ts","directionalHooks.ts","useRenderCurcle.ts","Controls.tsx","Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cell","type","className","checkIfFieldInArray","field","array","some","el","Boolean","x","y","Field","fieldWidth","fieldHeight","snake","food","R","map","index","isSnake","isFood","useGetPressedKey","useState","activeKeyCode","setActiveKeyCode","downHandler","code","upHandler","useEffect","window","addEventListener","removeEventListener","keys","directions","useGetLastDirection","pressedDirection","pressedKey","find","includes","usePressedGetDirection","direction","setDirection","useRenderCurcle","fps","on","renderNow","setRenderNow","setTimeout","Controls","gameState","startGame","score","onClick","gameSettins","getOffcetFromDirection","generateFood","numberOfFiels","numberOfEmptyFields","length","snakeFields","randomNumber","filter","a","b","min","max","Math","floor","random","getRandomNumber","App","setSnake","lastPressedDirection","resetLastPressedDirection","setGameState","setFood","speed","setSpeed","currentHead","newDirection","secondDirection","pressedOffcet","offcet","getCorrectDirection","newHead","noColisions","checkColisions","foodEated","newSnake","slice","Game","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAUeA,EAJF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KACd,OAAO,qBAAKC,UAAS,gBAAWD,MCFnBE,EAHa,SAACC,EAAmBC,GAApB,OAC1BA,EAAMC,MAAK,SAACC,GAAD,OAAQC,QAAQD,EAAGE,IAAML,EAAMK,GAAKF,EAAGG,IAAMN,EAAMM,OC0BjDC,EAhBD,SAAC,GAAsE,IAApEC,EAAmE,EAAnEA,WAAYC,EAAuD,EAAvDA,YAAaC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,KAC/C,OACE,qBAAKb,UAAU,UAAf,SACGc,IAAQ,EAAGJ,EAAaC,GAAaI,KAAI,SAACC,GACzC,IAAMR,GAAKQ,EAASA,EAAQN,GAAeA,EACrCH,EAAIS,EAAQL,EAEZM,EAAUhB,EADI,CAAEM,IAAGC,KACwBI,GAC3CM,EAASL,GAAQA,EAAKN,IAAMA,GAAKM,EAAKL,IAAMA,EAC5CT,EAAOkB,EAAU,QAAUC,EAAS,OAAS,QACnD,OAAO,cAAC,EAAD,CAAkBnB,KAAMA,GAAbiB,SCjBX,SAASG,IACtB,MAA0CC,mBAAwB,MAAlE,mBAAOC,EAAP,KAAsBC,EAAtB,KAEMC,EAAc,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KACjBA,IAASH,GACXC,EAAiBE,IAIfC,EAAY,SAAC,GAA4B,EAA1BD,OACNH,GACXC,EAAiB,OAkBrB,OAdAI,qBAAU,WACR,GAnBuB,kBAAXC,OA0BZ,OAHAA,OAAOC,iBAAiB,UAAWL,GACnCI,OAAOC,iBAAiB,QAASH,GAE1B,WACLE,OAAOE,oBAAoB,UAAWN,GACtCI,OAAOE,oBAAoB,QAASJ,MAErC,CAACF,EAAaE,IAEVJ,EC/BT,IAAMS,EAAyC,CAC7C,KAAM,CAAC,OAAQ,WACf,KAAM,CAAC,OAAQ,aACf,KAAM,CAAC,OAAQ,aACf,KAAM,CAAC,OAAQ,eAGXC,EAA0B,CAAC,KAAM,KAAM,KAAM,MAQtCC,EAAsB,WACjC,IAAMC,EAP8B,WACpC,IAAMC,EAAaf,IACnB,OAAKe,GACEH,EAAWI,MAAK,SAAC9B,GAAD,OAAQyB,EAAKzB,GAAI+B,SAASF,OADzB,KAKCG,GACzB,EAAkCjB,mBAA2B,MAA7D,mBAAOkB,EAAP,KAAkBC,EAAlB,KACAb,qBAAU,WACJO,GACFM,EAAaN,KAEd,CAACK,EAAWL,IAIf,MAAO,CAACK,EAF0B,kBAAMC,EAAa,SCFxCC,EAxBS,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,IAAKC,EAAgD,EAAhDA,GAC9B,EAAkCtB,oBAAkB,GAApD,mBAAOuB,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAlB,qBAAU,WACJgB,EACFE,GAAa,GAEbC,YAAW,WACTD,GAAa,KACZ,KAAOH,KAEX,CAACC,IAEJhB,qBAAU,WACJiB,GAAaD,IACfE,GAAa,GACbC,YAAW,WACTD,GAAa,KACZ,IAAOH,MAEX,CAACA,EAAKC,EAAIC,IACNA,GAAaD,GCCPI,EAfE,SAAC,GAAiE,IAA/DC,EAA8D,EAA9DA,UAAWC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,MACxC,OACE,sBAAKjD,UAAU,WAAf,UACiB,UAAd+C,GAAyB,oBAAG/C,UAAU,OAAb,oBAA4BiD,KACvC,UAAdF,GAAyB,wBAAQG,QAASF,EAAjB,wBACX,UAAdD,GACC,qCACE,mBAAG/C,UAAU,OAAb,uBACA,wBAAQkD,QAASF,EAAjB,+BCPJG,EASQ,GATRA,EAUS,GAVTA,EAWU,CACZ,CAAE5C,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAbT2C,EAeU,EAfVA,EAgBc,KAhBdA,EAiBM,GAjBNA,EAkBY,IAGZC,EAAyB,SAACd,GAG9B,MAAO,CAAE/B,EAFe,OAAd+B,EAAqB,EAAkB,OAAdA,GAAsB,EAAI,EAEjD9B,EADY,OAAd8B,EAAqB,EAAkB,OAAdA,GAAsB,EAAI,IAmCzDe,EAAe,SAACzC,EAAcF,EAAoBC,GACtD,IAAM2C,EAAgB5C,EAAaC,EAO7B4C,EAAsBD,EAAgB1C,EAAM4C,OAE5CC,EAAwB7C,EAAMG,KAAI,SAACV,GAAD,OAAQA,EAAGE,EAAIF,EAAGG,EAAIG,KAMxD+C,EAJc5C,IAAQ,EAAGwC,GAAeK,QAAO,SAACtD,GAAD,OAASoD,EAAYrB,SAAS/B,MAV3D,SAACuD,EAAWC,GAClC,IAAMC,EAAMF,EAAIC,EAAIA,EAAID,EAClBG,EAAMH,EAAIC,EAAID,EAAIC,EACxB,OAAOG,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAAOA,GASxBK,CAAgB,EAAGZ,IAI7C,MAAO,CACLhD,EAAGmD,EAAe/C,EAClBH,GAAIkD,EAAgBA,EAAehD,GAAeA,IAmFvC0D,EA/EO,WACpB,MAA0BhD,mBAAgB,IAA1C,mBAAOR,EAAP,KAAcyD,EAAd,KACA,EAAkCjD,mBAAoB+B,GAAtD,mBAAOb,EAAP,KAAkBC,EAAlB,KACA,EAA0DP,IAA1D,mBAAOsC,EAAP,KAA6BC,EAA7B,KACA,EAAkCnD,mBAAqB,SAAvD,mBAAO2B,EAAP,KAAkByB,EAAlB,KACA,EAAwBpD,mBAA4B,MAApD,mBAAOP,EAAP,KAAa4D,EAAb,KACA,EAA0BrD,mBAAS+B,GAAnC,mBAAOuB,EAAP,KAAcC,EAAd,KAEAjD,qBAAU,WACU,YAAdqB,GAEF0B,EAAQpB,EAAazC,EADeuC,QAGrC,CAACJ,EAAW0B,IAEf,IAAM9B,EAAYH,EAAgB,CAAEC,IAAKiC,EAAOhC,GAAkB,YAAdK,IA+CpD,OArCArB,qBAAU,WACR,GAAIiB,EAAW,CACb,IAAMiC,EAAchE,EAAM,GAEpBiE,EApFgB,SAC1BvC,EACAwC,GAEA,IAAMC,EAAgB3B,EAAuB0B,GACvCE,EAAS5B,EAAuBd,GAMtC,OAHGyC,EAAcxE,GAAKwE,EAAcxE,KAAOyE,EAAOzE,GAC/CwE,EAAcvE,GAAKuE,EAAcvE,KAAOwE,EAAOxE,IAEvBsE,EAGpBxC,EAFEwC,EAwEgBG,CAAoB3C,EAAWgC,GAE9CU,EAAS5B,EAAuByB,GAEtCtC,EAAasC,GAEbN,IAEA,IAAMW,EAAsB,CAAE3E,EAAGqE,EAAYrE,EAAIyE,EAAOzE,EAAGC,EAAGoE,EAAYpE,EAAIwE,EAAOxE,GAC/E2E,EA5EW,SACrBD,EACAtE,EACAF,EACAC,GAJqB,QAOnBuE,EAAQ3E,GAAKG,GACbwE,EAAQ3E,EAAI,GACZ2E,EAAQ1E,GAAKG,GACbuE,EAAQ1E,EAAI,GACZP,EAAoBiF,EAAStE,IAiEPwE,CAClBF,EACAtE,EACAuC,EACAA,GAGF,GAAIgC,EAAa,CACf,IAAME,EAAYxE,GAAQqE,EAAQ3E,IAAMM,EAAKN,GAAK2E,EAAQ1E,IAAMK,EAAKL,EAE/D8E,EAAe,CAAIJ,GAAJ,mBAAiBG,EAAYzE,EAAQA,EAAM2E,MAAM,GAAI,KACtEF,IACEX,EAAQvB,GAAsBwB,EAASD,EAAQvB,GAEnDsB,EAAQpB,EAAaiC,EAAUnC,EAAwBA,KAGzDkB,EAASiB,QAETd,EAAa,YAGhB,CAAC7B,EAAW/B,EAAOyD,EAAU/B,EAAWC,EAAc+B,IAGvD,gCACE,cAAC,EAAD,CACEvB,UAAWA,EACXC,UAjDY,WAChBuB,IACAF,EAASlB,GACTZ,EAAaY,GACbwB,EAASxB,GACTqB,EAAa,YA6CTvB,MAAOrC,EAAM4C,OAASL,EAAyBK,SAEjD,cAAC,EAAD,CACE9C,WAAYyC,EACZxC,YAAawC,EACbvC,MAAOA,EACPC,KAAMA,QCvJCuD,EAVO,WACpB,OACE,qBAAKpE,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAACwF,EAAD,SCMOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c79bf74e.chunk.js","sourcesContent":["import React from 'react';\n\ninterface CellProp extends JSX.IntrinsicAttributes {\n  type: 'snake' | 'food' | 'empty';\n}\n\nconst Cell = ({ type }: CellProp): JSX.Element => {\n  return <div className={`field ${type}`} />;\n};\n\nexport default Cell;\n","import { Coodinates } from './types';\n\nconst checkIfFieldInArray = (field: Coodinates, array: Coodinates[]): boolean =>\n  array.some((el) => Boolean(el.x === field.x && el.y === field.y));\n\nexport default checkIfFieldInArray;\n","import React from 'react';\nimport * as R from 'ramda';\nimport Cell from './Cell';\nimport { Snake, Coodinates } from './types';\nimport checkIfFieldInArray from './checkIfFieldInArray';\n\ninterface FieldProp {\n  fieldWidth: number;\n  fieldHeight: number;\n  snake: Snake;\n  food: Coodinates | null;\n}\n\nconst Field = ({ fieldWidth, fieldHeight, snake, food }: FieldProp): JSX.Element => {\n  return (\n    <div className=\"wrapper\">\n      {R.range(0, fieldWidth * fieldHeight).map((index) => {\n        const y = (index - (index % fieldWidth)) / fieldWidth;\n        const x = index % fieldHeight;\n        const coordinates = { x, y };\n        const isSnake = checkIfFieldInArray(coordinates, snake);\n        const isFood = food && food.x === x && food.y === y;\n        const type = isSnake ? 'snake' : isFood ? 'food' : 'empty';\n        return <Cell key={index} type={type} />;\n      })}\n    </div>\n  );\n};\n\nexport default Field;\n","import { useEffect, useState } from 'react';\n\nfunction hasWindow(): boolean {\n  return typeof window === 'object';\n}\n\nexport default function useGetPressedKey(): string | null {\n  const [activeKeyCode, setActiveKeyCode] = useState<string | null>(null);\n\n  const downHandler = ({ code }: KeyboardEvent) => {\n    if (code !== activeKeyCode) {\n      setActiveKeyCode(code);\n    }\n  };\n\n  const upHandler = ({ code }: KeyboardEvent) => {\n    if (code === activeKeyCode) {\n      setActiveKeyCode(null);\n    }\n  };\n\n  useEffect(() => {\n    if (!hasWindow()) {\n      return;\n    }\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [downHandler, upHandler]);\n\n  return activeKeyCode;\n}\n","import { useEffect, useState } from 'react';\nimport useGetPressedKey from './useGetPressedKey';\nimport { Direction } from './types';\n\nconst keys: { [key in Direction]: string[] } = {\n  '-y': ['KeyW', 'ArrowUp'],\n  '+y': ['KeyS', 'ArrowDown'],\n  '-x': ['KeyA', 'ArrowLeft'],\n  '+x': ['KeyD', 'ArrowRight'],\n};\n\nconst directions: Direction[] = ['-y', '+y', '-x', '+x'];\n\nexport const usePressedGetDirection = (): Direction | null => {\n  const pressedKey = useGetPressedKey();\n  if (!pressedKey) return null;\n  return directions.find((el) => keys[el].includes(pressedKey)) || null;\n};\n\nexport const useGetLastDirection = (): [Direction | null, () => void] => {\n  const pressedDirection = usePressedGetDirection();\n  const [direction, setDirection] = useState<Direction | null>(null);\n  useEffect(() => {\n    if (pressedDirection) {\n      setDirection(pressedDirection);\n    }\n  }, [direction, pressedDirection]);\n\n  const resetLastPressedDirection = () => setDirection(null);\n\n  return [direction, resetLastPressedDirection];\n};\n","import { useState, useEffect } from 'react';\n\nconst useRenderCurcle = ({ fps, on }: { fps: number; on: boolean }): boolean => {\n  const [renderNow, setRenderNow] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (on) {\n      setRenderNow(true);\n    } else {\n      setTimeout(() => {\n        setRenderNow(false);\n      }, 1001 / fps);\n    }\n  }, [on]);\n\n  useEffect(() => {\n    if (renderNow && on) {\n      setRenderNow(false);\n      setTimeout(() => {\n        setRenderNow(true);\n      }, 1000 / fps);\n    }\n  }, [fps, on, renderNow]);\n  return renderNow && on;\n};\n\nexport default useRenderCurcle;\n","import React from 'react';\nimport { GameStates } from './types';\n\ninterface ControlsProps {\n  gameState: GameStates;\n  startGame: () => void;\n  score: number;\n}\n\nconst Controls = ({ gameState, startGame, score }: ControlsProps): JSX.Element => {\n  return (\n    <div className=\"controls\">\n      {gameState !== 'ready' && <p className=\"text\">srore: {score}</p>}\n      {gameState === 'ready' && <button onClick={startGame}>Start game</button>}\n      {gameState === 'loose' && (\n        <>\n          <p className=\"text\">you loose</p>\n          <button onClick={startGame}>Start over</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Controls;\n","import React, { useState, useEffect } from 'react';\nimport * as R from 'ramda';\nimport './App.css';\nimport Field from './Field';\nimport { Snake, Direction, GameStates, Coodinates } from './types';\nimport { useGetLastDirection } from './directionalHooks';\nimport useRenderCurcle from './useRenderCurcle';\nimport Controls from './Controls';\nimport checkIfFieldInArray from './checkIfFieldInArray';\n\nconst gameSettins: {\n  fieldWidth: number;\n  fieldHeight: number;\n  initialSnake: Snake;\n  initialSpeed: number;\n  initialDirection: Direction;\n  maxSpeed: number;\n  speedIncrement: number;\n} = {\n  fieldWidth: 15,\n  fieldHeight: 15,\n  initialSnake: [\n    { x: 1, y: 0 },\n    { x: 0, y: 0 },\n  ],\n  initialSpeed: 4,\n  initialDirection: '+x',\n  maxSpeed: 15,\n  speedIncrement: 0.25,\n};\n\nconst getOffcetFromDirection = (direction: Direction | null): Coodinates => {\n  const x = direction === '+x' ? 1 : direction === '-x' ? -1 : 0;\n  const y = direction === '+y' ? 1 : direction === '-y' ? -1 : 0;\n  return { x, y };\n};\n\nconst getCorrectDirection = (\n  direction: Direction,\n  secondDirection: Direction | null,\n): Direction => {\n  const pressedOffcet = getOffcetFromDirection(secondDirection);\n  const offcet = getOffcetFromDirection(direction);\n\n  const directionIsInvalid =\n    (pressedOffcet.x && pressedOffcet.x === -offcet.x) ||\n    (pressedOffcet.y && pressedOffcet.y === -offcet.y);\n\n  if (!directionIsInvalid && secondDirection) {\n    return secondDirection;\n  }\n  return direction;\n};\n\nconst checkColisions = (\n  newHead: Coodinates,\n  snake: Snake,\n  fieldWidth: number,\n  fieldHeight: number,\n): boolean =>\n  !(\n    newHead.x >= fieldWidth ||\n    newHead.x < 0 ||\n    newHead.y >= fieldHeight ||\n    newHead.y < 0 ||\n    checkIfFieldInArray(newHead, snake)\n  );\n\nconst generateFood = (snake: Snake, fieldWidth: number, fieldHeight: number): Coodinates => {\n  const numberOfFiels = fieldWidth * fieldHeight;\n  const getRandomNumber = (a: number, b: number): number => {\n    const min = a > b ? b : a;\n    const max = a > b ? a : b;\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  const numberOfEmptyFields = numberOfFiels - snake.length;\n\n  const snakeFields: number[] = snake.map((el) => el.x + el.y * fieldHeight);\n\n  const emptyFields = R.range(0, numberOfFiels).filter((el) => !snakeFields.includes(el));\n\n  const randomNumberIndex = getRandomNumber(0, numberOfEmptyFields);\n\n  const randomNumber = emptyFields[randomNumberIndex];\n\n  return {\n    x: randomNumber % fieldHeight,\n    y: (randomNumber - (randomNumber % fieldWidth)) / fieldWidth,\n  };\n};\n\nconst App: React.FC = () => {\n  const [snake, setSnake] = useState<Snake>([]);\n  const [direction, setDirection] = useState<Direction>(gameSettins.initialDirection);\n  const [lastPressedDirection, resetLastPressedDirection] = useGetLastDirection();\n  const [gameState, setGameState] = useState<GameStates>('ready');\n  const [food, setFood] = useState<Coodinates | null>(null);\n  const [speed, setSpeed] = useState(gameSettins.initialSpeed);\n\n  useEffect(() => {\n    if (gameState === 'running') {\n      const { fieldWidth, fieldHeight } = gameSettins;\n      setFood(generateFood(snake, fieldWidth, fieldHeight));\n    }\n  }, [gameState, setFood]);\n\n  const renderNow = useRenderCurcle({ fps: speed, on: gameState === 'running' });\n\n  const startGame = () => {\n    resetLastPressedDirection();\n    setSnake(gameSettins.initialSnake);\n    setDirection(gameSettins.initialDirection);\n    setSpeed(gameSettins.initialSpeed);\n    setGameState('running');\n  };\n\n  useEffect(() => {\n    if (renderNow) {\n      const currentHead = snake[0];\n\n      const newDirection = getCorrectDirection(direction, lastPressedDirection);\n\n      const offcet = getOffcetFromDirection(newDirection);\n\n      setDirection(newDirection);\n\n      resetLastPressedDirection();\n\n      const newHead: Coodinates = { x: currentHead.x + offcet.x, y: currentHead.y + offcet.y };\n      const noColisions = checkColisions(\n        newHead,\n        snake,\n        gameSettins.fieldWidth,\n        gameSettins.fieldHeight,\n      );\n\n      if (noColisions) {\n        const foodEated = food && newHead.x === food.x && newHead.y === food.y;\n\n        const newSnake: Snake = [newHead, ...(foodEated ? snake : snake.slice(0, -1))];\n        if (foodEated) {\n          if (speed < gameSettins.maxSpeed) setSpeed(speed + gameSettins.speedIncrement);\n\n          setFood(generateFood(newSnake, gameSettins.fieldWidth, gameSettins.fieldHeight));\n        }\n\n        setSnake(newSnake);\n      } else {\n        setGameState('loose');\n      }\n    }\n  }, [renderNow, snake, setSnake, direction, setDirection, lastPressedDirection]);\n\n  return (\n    <div>\n      <Controls\n        gameState={gameState}\n        startGame={startGame}\n        score={snake.length - gameSettins.initialSnake.length}\n      />\n      <Field\n        fieldWidth={gameSettins.fieldWidth}\n        fieldHeight={gameSettins.fieldHeight}\n        snake={snake}\n        food={food}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport './App.css';\nimport Game from './Game';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Game />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}